---
title: Define Environment Variables
owner: @mastertinner
---

<strong><%= modified_date %></strong>

<%= vars.product_short %> lets you externalise configuration - storing data such as encryption keys or external resource addresses in [environment variables](../devguide/deploy-apps/environment-variable.html).

At runtime, environment variables are exposed to the application through its environment. You can use these for example to run Node.js in production mode setting the `NODE_ENV` environment variable.

<pre class="terminal">
$ cf set-env cf-sample-app-node NODE_ENV production
Setting env variable 'NODE_ENV' to 'production' for app cf-sample-app-node in org MyOrg / space MySpace as user@smydomain.com...
OK
TIP: Use 'cf restage' to ensure your env variable changes take effect
</pre>

Then restage your app as suggested using

<pre class="terminal">
$ cf restage cf-sample-app-node
Restaging app cf-sample-app-node in org MyOrg / space MySpace as user@mydomain.com...
-----> Downloaded app package (8.0K)
-----> Downloaded app buildpack cache (2.3M)
-------> Buildpack version 1.5.9

...
</pre>

 All environment variables are accessed using the `process.env` namespace from within your Node.js app.

<div style="text-align:center">
  <a href="./bind-service.html" class="btn btn-primary">I've set my environment variable</a>
</div>
